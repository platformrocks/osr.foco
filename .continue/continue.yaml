project_context:
  name: 'OSR.Foco'
  type: 'desktop-productivity-app'
  architecture: 'tauri-react-monorepo'

custom_instructions:
  code_style:
    - "Use strict TypeScript with explicit typing - never use 'any'"
    - 'Functional React components only - no class components'
    - 'Follow camelCase for variables, PascalCase for types/components'
    - 'Use kebab-case for file names (e.g., task-manager.tsx)'
    - 'Implement single responsibility principle for components'
    - 'All props must have explicit TypeScript interfaces'

  architecture_patterns:
    - 'Frontend-backend communication via Tauri invoke() calls'
    - 'Validate all IPC data crossing frontend-backend boundary'
    - 'Use async/await for all Tauri command operations'
    - 'Implement proper error handling with try-catch blocks'
    - 'Keep components focused on presentation, logic in hooks'

  domain_concepts:
    - 'Task: todo items with id, title, status, date, createdAt'
    - 'Session: focus sessions with id, taskId, type, timestamps'
    - 'BlockList: blocked sites with id, site, updatedAt'
    - 'Configuration: app settings with theme, brainrot, notifications'

  forbidden_practices:
    - "Never use 'any' type in TypeScript"
    - 'No class components in React'
    - 'No inline styles - use CSS classes'
    - 'No console.log in production code'
    - 'No direct DOM manipulation'
    - 'No disabled ESLint rules without justification'

automation_rules:
  file_creation:
    - 'When creating React components, always include props interface'
    - 'When creating Tauri commands, include input validation'
    - 'When adding new types, update entities/types.ts'
    - 'When creating hooks, include proper TypeScript generics'

  code_generation:
    - 'Generate comprehensive error handling for async operations'
    - 'Include React.memo for components that receive props'
    - 'Add proper cleanup in useEffect hooks'
    - 'Generate TypeScript interfaces before implementation'

development_context:
  stack:
    frontend: ['React 19.1.0', 'TypeScript 5.8.3', 'Vite 7.0.4']
    backend: ['Rust', 'Tauri 2.x']
    tools: ['pnpm', 'ESLint 9.0.0', 'Prettier', 'Husky']

  structure:
    main_package: 'packages/desktop/'
    source_dirs: ['src/', 'src-tauri/']
    config_files: ['tsconfig.json', 'tauri.conf.json', 'vite.config.ts']

  commands:
    dev: 'pnpm dev'
    build: 'pnpm build'
    lint: 'pnpm lint'
    format: 'pnpm format'

quality_requirements:
  - 'Code must pass TypeScript strict mode compilation'
  - 'All code must pass ESLint validation'
  - 'Use Prettier formatting consistently'
  - 'Follow Conventional Commits format'
  - 'Document complex business logic with comments'
  - 'Update related documentation when making changes'

performance_guidelines:
  - 'Minimize data transferred via IPC calls'
  - 'Use React.memo and useMemo for expensive operations'
  - 'Optimize bundle size by avoiding unnecessary imports'
  - 'Leverage Rust backend for performance-critical operations'
  - 'Implement proper loading states for async operations'

security_considerations:
  - 'Validate all user inputs before processing'
  - 'Sanitize data before storing or displaying'
  - "Don't expose sensitive information in error messages"
  - "Use Tauri's permission model for API access"
  - 'Note: CSP is currently disabled (known security risk)'

testing_strategy:
  current_status: 'not_implemented'
  priorities:
    - 'Set up Jest + React Testing Library'
    - 'Add unit tests for core business logic'
    - 'Implement integration tests for Tauri commands'
    - 'Add end-to-end tests for critical user workflows'

documentation_standards:
  - 'Use JSDoc for public functions and complex logic'
  - 'Keep .guided/ documentation updated with changes'
  - 'Document architectural decisions and trade-offs'
  - 'Maintain API documentation for Tauri commands'
  - 'Include setup and troubleshooting information'
